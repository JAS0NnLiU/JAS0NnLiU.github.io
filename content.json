{"meta":{"title":"Jason","subtitle":"Never too late to learn.","description":"生如逆旅,一苇以航","author":"Jason","url":"http://example.com","root":"/"},"pages":[{"title":"分类","date":"2024-07-21T11:33:32.000Z","updated":"2024-07-22T12:07:59.515Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2024-07-21T10:18:59.000Z","updated":"2024-07-22T11:32:16.919Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"关于","date":"2024-07-21T11:34:08.000Z","updated":"2024-07-22T12:08:16.336Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""},{"title":"音乐","date":"2024-07-23T10:35:55.000Z","updated":"2024-07-23T10:47:07.504Z","comments":true,"path":"music/index.html","permalink":"http://example.com/music/index.html","excerpt":"","text":""}],"posts":[{"title":"Easypan | ②","slug":"Easypan2","date":"2024-07-23T10:14:28.000Z","updated":"2024-07-23T10:20:31.184Z","comments":true,"path":"2024/07/23/Easypan2/","permalink":"http://example.com/2024/07/23/Easypan2/","excerpt":"","text":"","categories":[{"name":"Java","slug":"Java","permalink":"http://example.com/categories/Java/"},{"name":"Project","slug":"Java/Project","permalink":"http://example.com/categories/Java/Project/"}],"tags":[{"name":"Easypan","slug":"Easypan","permalink":"http://example.com/tags/Easypan/"}]},{"title":"Easypan | ①","slug":"Easypan1","date":"2024-07-20T12:49:24.000Z","updated":"2024-07-23T10:21:23.836Z","comments":true,"path":"2024/07/20/Easypan1/","permalink":"http://example.com/2024/07/20/Easypan1/","excerpt":"","text":"一、随机验证码生成接口实现注册新账号接口中，用户凭借邮箱进行注册。为了防止恶意注册和暴力破解，通过生成随机图片验证码，并且在验证码正确后才能发送邮件进行注册。 CreateImageCode类： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185public class CreateImageCode { // 图片的宽度 private int width = 160; // 图片的高度 private int height = 40; // 验证码字符个数 private int codeCount = 4; // 验证码干扰线数 private int lineCount = 20; // 验证码 private String code = null; // 验证码图片Buffer private BufferedImage buffImg = null; Random random = new Random(); public CreateImageCode() { creatImage(); } public CreateImageCode(int width, int height) { this.width = width; this.height = height; creatImage(); } public CreateImageCode(int width, int height, int codeCount) { this.width = width; this.height = height; this.codeCount = codeCount; creatImage(); } public CreateImageCode(int width, int height, int codeCount, int lineCount) { this.width = width; this.height = height; this.codeCount = codeCount; this.lineCount = lineCount; creatImage(); } // 生成图片 private void creatImage() { int fontWidth = width / codeCount;// 字体的宽度 int fontHeight = height - 5;// 字体的高度 int codeY = height - 8; // 图像buffer buffImg = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB); Graphics g = buffImg.getGraphics(); //Graphics2D g = buffImg.createGraphics(); // 设置背景色 g.setColor(getRandColor(200, 250)); g.fillRect(0, 0, width, height); // 设置字体 //Font font1 = getFont(fontHeight); Font font = new Font(\"Fixedsys\", Font.BOLD, fontHeight); g.setFont(font); // 设置干扰线 for (int i = 0; i &lt; lineCount; i++) { int xs = random.nextInt(width); int ys = random.nextInt(height); int xe = xs + random.nextInt(width); int ye = ys + random.nextInt(height); g.setColor(getRandColor(1, 255)); g.drawLine(xs, ys, xe, ye); } // 添加噪点 float yawpRate = 0.01f;// 噪声率 int area = (int) (yawpRate * width * height); for (int i = 0; i &lt; area; i++) { int x = random.nextInt(width); int y = random.nextInt(height); buffImg.setRGB(x, y, random.nextInt(255)); } String str1 = randomStr(codeCount);// 得到随机字符 this.code = str1; for (int i = 0; i &lt; codeCount; i++) { String strRand = str1.substring(i, i + 1); g.setColor(getRandColor(1, 255)); // g.drawString(a,x,y); // a为要画出来的东西，x和y表示要画的东西最左侧字符的基线位于此图形上下文坐标系的 (x, y) 位置处 g.drawString(strRand, i * fontWidth + 3, codeY); } } // 得到随机字符 private String randomStr(int n) { String str1 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890\"; String str2 = \"\"; int len = str1.length() - 1; double r; for (int i = 0; i &lt; n; i++) { r = (Math.random()) * len; str2 = str2 + str1.charAt((int) r); } return str2; } // 得到随机颜色 private Color getRandColor(int fc, int bc) {// 给定范围获得随机颜色 if (fc &gt; 255) fc = 255; if (bc &gt; 255) bc = 255; int r = fc + random.nextInt(bc - fc); int g = fc + random.nextInt(bc - fc); int b = fc + random.nextInt(bc - fc); return new Color(r, g, b); } /** * 产生随机字体 */ private Font getFont(int size) { Random random = new Random(); Font font[] = new Font[5]; font[0] = new Font(\"Ravie\", Font.PLAIN, size); font[1] = new Font(\"Antique Olive Compact\", Font.PLAIN, size); font[2] = new Font(\"Fixedsys\", Font.PLAIN, size); font[3] = new Font(\"Wide Latin\", Font.PLAIN, size); font[4] = new Font(\"Gill Sans Ultra Bold\", Font.PLAIN, size); return font[random.nextInt(5)]; } // 扭曲方法 private void shear(Graphics g, int w1, int h1, Color color) { shearX(g, w1, h1, color); shearY(g, w1, h1, color); } private void shearX(Graphics g, int w1, int h1, Color color) { int period = random.nextInt(2); boolean borderGap = true; int frames = 1; int phase = random.nextInt(2); for (int i = 0; i &lt; h1; i++) { double d = (double) (period &gt;&gt; 1) * Math.sin((double) i / (double) period + (6.2831853071795862D * (double) phase) / (double) frames); g.copyArea(0, i, w1, 1, (int) d, 0); if (borderGap) { g.setColor(color); g.drawLine((int) d, i, 0, i); g.drawLine((int) d + w1, i, w1, i); } } } private void shearY(Graphics g, int w1, int h1, Color color) { int period = random.nextInt(40) + 10; // 50; boolean borderGap = true; int frames = 20; int phase = 7; for (int i = 0; i &lt; w1; i++) { double d = (double) (period &gt;&gt; 1) * Math.sin((double) i / (double) period + (6.2831853071795862D * (double) phase) / (double) frames); g.copyArea(i, 0, 1, h1, 0, (int) d); if (borderGap) { g.setColor(color); g.drawLine(i, (int) d, i, 0); g.drawLine(i, (int) d + h1, i, h1); } } } public void write(OutputStream sos) throws IOException { ImageIO.write(buffImg, \"png\", sos); sos.close(); } public BufferedImage getBuffImg() { return buffImg; } public String getCode() { return code.toLowerCase(); }} Controller层： 12345678910111213141516171819202122@RequestMapping(\"/checkCode\")public void checkCode(HttpServletResponse response, HttpSession session, Integer type) throws IOException { //生成验证码图片 CreateImageCode vCode = new CreateImageCode(130, 38, 5, 10); //设置响应头部信息，禁止浏览器缓存生成的图片 response.setHeader(\"Pragma\", \"no-cache\"); response.setHeader(\"Cache-Control\", \"no-cache\"); response.setDateHeader(\"Expires\", 0); //设置响应的内容类型为 \"image/jpeg\"，指示响应是一个 JPEG 格式的图片 response.setContentType(\"image/jpeg\"); // 获取生成的验证码字符串 String code = vCode.getCode(); // 将验证码根据 type 参数存储到 HttpSession 对象中 type = 0 代表注册 if (type == null || type == 0) { session.setAttribute(Constants.CHECK_CODE_KEY, code); } else { session.setAttribute(Constants.CHECK_CODE_KEY_EMAIL, code); } // 将生成的验证码图片写入响应的输出流，返回给客户端 vCode.write(response.getOutputStream());} 注意： 设置响应头部信息，禁止浏览器缓存生成的图片，防止了浏览器在加载验证码图片的时候，直接调用缓存图片，而刷新不出来新的图片的问题。 前端浏览器为了避免不断的访问服务器而造成性能压力，他会把同路径的图片缓存下来，这样下一次访问的时候就不需要服务器请求资源。在图片验证码地址后附加时间参数，构造出唯一的地址参数。 1234567891011121314151617181920@RequestMapping(\"/sendEmailCode\")@GlobalInterceptor(checkLogin = false, checkParams = true)public ResponseVO sendEmailCode(HttpSession session, @VerifyParam(required = true, regex = VerifyRegexEnum.EMAIL, max = 150) String email, @VerifyParam(required = true) String checkCode, @VerifyParam(required = true) Integer type) { try { //校验用户输入的验证码和session中的验证码是否一致 if(!checkCode.equalsIgnoreCase((String) session.getAttribute(Constants.CHECK_CODE_KEY_EMAIL))) { throw new BusinessException(\"图片验证码不正确\"); } //发送邮箱验证码 emailCodeService.sendEmailCode(email, type); return getSuccessResponseVO(null); } finally { //删掉原有的验证码，避免被重复使用 session.removeAttribute(Constants.CHECK_CODE_KEY_EMAIL); }} 二、邮件发送接口实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748@Override@Transactional(rollbackFor = Exception.class)public void sendEmailCode(String email, Integer type) { //如果是注册，校验邮箱是否已存在 if (type == Constants.ZERO) { UserInfo userInfo = userInfoMapper.selectByEmail(email); if (null != userInfo) { throw new BusinessException(\"邮箱已经存在\"); } } //生成随机的五位邮箱验证码 String code = StringTools.getRandomNumber(Constants.LENGTH_5); //发送验证码 sendMailCode(email, code); //将之前的验证码置为无效 emailCodeMapper.disableEmailCode(email); //将本次注册信息插入到数据库 EmailCode emailCode = new EmailCode(); emailCode.setCode(code); emailCode.setEmail(email); emailCode.setStatus(Constants.ZERO); emailCode.setCreateTime(new Date()); emailCodeMapper.insert(emailCode);}private void sendMailCode(String toEmail, String code) { try{ //构造一份邮件 MimeMessage message = javaMailSender.createMimeMessage(); //辅助设置MimeMessage的属性 MimeMessageHelper helper = new MimeMessageHelper(message, true); //设置发件人、收件人 helper.setFrom(appConfig.getSendUserName()); helper.setTo(toEmail); //获取redis中的邮件对象 SysSettingsDto sysSettingsDto = redisComponent.getSysSettingDto(); //邮件主题 helper.setSubject(sysSettingsDto.getRegisterMailTitle()); //邮件内容 helper.setText(String.format(sysSettingsDto.getRegisterEmailContent(), code)); //邮件发送时间 helper.setSentDate(new Date()); javaMailSender.send(message); }catch (Exception e) { logger.error(\"邮件发送失败\",e); throw new BusinessException(\"邮件发送失败\"); }} disableEmailCode的xml: 1234&lt;update id=\"disableEmailCode\"&gt; update email_code set status = 1 where email = #{email} and status = 0;&lt;/update&gt;","categories":[{"name":"Java","slug":"Java","permalink":"http://example.com/categories/Java/"},{"name":"Project","slug":"Java/Project","permalink":"http://example.com/categories/Java/Project/"}],"tags":[{"name":"Easypan","slug":"Easypan","permalink":"http://example.com/tags/Easypan/"}]}],"categories":[{"name":"Java","slug":"Java","permalink":"http://example.com/categories/Java/"},{"name":"Project","slug":"Java/Project","permalink":"http://example.com/categories/Java/Project/"}],"tags":[{"name":"Easypan","slug":"Easypan","permalink":"http://example.com/tags/Easypan/"}]}